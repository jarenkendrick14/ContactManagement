import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';
import { Contact } from '../models/contact.model'; // Ensure this relative path is correct

// *** USING PATH ALIAS DEFINED IN tsconfig.json ***
import { environment } from '@env/environment'; // Import using the @env alias

@Injectable({
  providedIn: 'root' // Service provided in the application root injector
})
export class ContactService {
  // Construct the base API URL using the value from the imported environment file
  private apiUrl = `${environment.apiUrl}/contacts`;

  // Define common HTTP options, like setting the Content-Type header for POST/PUT
  private httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Inject the HttpClient service dependency
  constructor(private http: HttpClient) { }

  // Method to get all contacts from the API
  getContacts(): Observable<Contact[]> {
    return this.http.get<Contact[]>(this.apiUrl).pipe(
      retry(1), // Retry the request once if it fails
      catchError(this.handleError) // Pass any errors to the centralized handler
    );
  }

  // Method to get a single contact by its ID
  getContact(id: number): Observable<Contact> {
    const url = `${this.apiUrl}/${id}`; // Append ID to the base URL
    return this.http.get<Contact>(url).pipe(
      catchError(this.handleError)
    );
  }

  // Method to create a new contact
  // Takes a Contact object, excluding the 'id' property (as it's generated by backend)
  createContact(contact: Omit<Contact, 'id'>): Observable<Contact> {
    // Send POST request with the contact data and HTTP options
    return this.http.post<Contact>(this.apiUrl, contact, this.httpOptions).pipe(
      catchError(this.handleError)
    );
  }

  // Method to update an existing contact
  // Takes the ID and the full Contact object with updated data
  updateContact(id: number, contact: Contact): Observable<any> { // PUT often returns 204 No Content (void/any)
    const url = `${this.apiUrl}/${id}`; // Append ID to the base URL
    // Send PUT request with the contact data and HTTP options
    return this.http.put(url, contact, this.httpOptions).pipe(
      catchError(this.handleError)
    );
  }

  // Method to delete a contact by its ID
  deleteContact(id: number): Observable<any> { // DELETE often returns 204 No Content (void/any)
    const url = `${this.apiUrl}/${id}`; // Append ID to the base URL
    // Send DELETE request
    return this.http.delete(url).pipe(
      catchError(this.handleError)
    );
  }

  // Private centralized method for handling HTTP errors
  private handleError(error: HttpErrorResponse): Observable<never> { // Returns an Observable that errors
    let userMessage = 'An unknown error occurred! Please try again later.';
    console.error('API Error Details:', error); // Log the full technical error for developers

    if (error.error instanceof ErrorEvent) {
      // A client-side or network error occurred. Handle it accordingly.
      userMessage = `Network/Client Error: ${error.error.message}`;
    } else {
      // The backend returned an unsuccessful response code.
      const errorBody = error.error; // The response body might contain clues
      console.error(
        `Backend returned code ${error.status}, ` +
        `body type: ${typeof errorBody}, body content: ${JSON.stringify(errorBody)}`
      );

      // Try to extract a more specific user-friendly message from the backend response
      if (error.status === 400 && errorBody?.message) {
        userMessage = `Bad Request: ${errorBody.message}`;
      } else if (error.status === 400 && typeof errorBody === 'string') {
        userMessage = `Bad Request: ${errorBody}`;
      } else if (error.status === 404) {
        userMessage = 'The requested resource was not found (404).';
      } else if (error.status === 409 && errorBody?.message) { // 409 Conflict (e.g., duplicate email)
        userMessage = `Conflict: ${errorBody.message}`;
      } else if (error.status === 500) {
        userMessage = 'An internal server error occurred (500). Please contact support.';
      } else if (error.message) {
         // Fallback if no specific message could be parsed
         userMessage = `Error ${error.status}: ${error.message}`;
      }
    }
    // Return an observable that immediately errors out with the user-facing message.
    return throwError(() => new Error(userMessage));
  }
}